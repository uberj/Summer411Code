exec /usr/bin/python -x "$0" "$@"
# -*- coding: ISO-8859-15 -*-
#
# wake-on-lan
# $Id: wake-on-lan.cin,v 1.2 2011/04/05 22:46:40 das Exp $
# S. Das, London
 
## --- Local nodes -------------------------- ##
## Modify this to put your own hostname/MAC 
## address pair here. The format is:
## "abc xx:xx:xx:xx:xx:xx", where "abc" could
## be any name you like and the "xx:xx..." is
## the MAC address of the machine the magic
## packet is going to be sent. 
 
node_lst = [
	'pcbk 00:18:8b:c9:29:73',
	'htpc 00:24:7c:a2:e4:d0'
]
 
## --- don't change anything below --------- ##
 
import os,sys,string,commands
import struct, socket
import re,random
 
retval = 0
 
X = '([a-fA-F0-9]{2}[:|\-|.]?){5}[a-fA-F0-9]{2}$'
S = re.compile(r'\s+')
E = re.compile('^$')
 
mmap = {}
 
## Exit on error
def sys_exit():
    sys.stdout.flush()
    sys.exit(1)
 
## First argument 'None' in str.translate is new in 2.6. 
## Previously, it was a string of 256 characters.
if sys.version_info < (2, 6):
    f1_arg = ''.join(chr(i) for i in xrange(256))
else:
    f1_arg = None
 
## broadcast address
osSys = "uname -s"
BSD = "ifconfig | grep -w broadcast | cut -d\  -f 6"
LNX = "ip -o addr show | grep -w 'inet' | grep -vw 'lo' | cut -d\  -f 9"
 
if commands.getoutput(osSys) == "Linux":
    bCast = commands.getoutput(LNX)
elif commands.getoutput(osSys) == "Darwin":
    bCast = commands.getoutput(BSD)
else:
    print "System not supported!!"
    sys_exit()
 
 
def WakeOnLan(mac_address):
 
    ## Building the Wake-On-LAN "Magic Packet"...
    ## Pad the synchronization stream.
    data = ''.join(['FFFFFFFFFFFF', mac_address * 20])
    msg = '' 
 
    ## Split up the hex values and pack.
    for i in range(0, len(data), 2):
        msg = ''.join([msg, struct.pack('B', int(data[i: i + 2], 16))])
 
    ## ...and send it to the broadcast address using UDP
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
    s.sendto(msg, (bCast, 9))
    s.close()
 
## check if hostname is provided
if len(sys.argv) != 2:
    print "Usage: %s <hostname>" % sys.argv[0]
    sys_exit()
 
for i in node_lst:
    # strip off everything from first "#" found
    i = i.split('#',1)[0]
    if E.match(i):
        continue
 
    h = S.split(i,1)[0]             ## host name
    m = S.split(i,1)[-1]            ## MAC address
    mmap[h] = m.strip('\t|" "')
 
for j, k in mmap.iteritems():
    if sys.argv[1] == j:
	if not re.search(X, k):
	    print "Invalid MAC address [",k,"]; nothing to do!!"
	    sys_exit()
	else:
	    WakeOnLan(k.translate(f1_arg,':.-'))
	    print "WOL request has been sent to %s [%s]" % (j,k)
	    break
else:
    print "Host [%s] doesn't exist!!" % sys.argv[1]
    sys_exit()
